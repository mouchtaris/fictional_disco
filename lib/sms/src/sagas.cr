# vim: et ts=2 sw=2

module Sagas
  def saga_line(&block : Proc(String))
    LineAdder.new(block)
  end

  def saga_empty_line
    [
      saga_line { "" },
    ]
  end

  def saga_open_body
    [
      saga_line { "{" },
    ]
  end

  def saga_close_body
    [
      saga_line { "}" },
    ]
  end

  def saga_empty_body
    saga_open_body +
      saga_close_body
  end

  def saga_warn_autogenerated_begin
    [
      saga_line { "// SMS:autogenerated_begin" },
    ]
  end

  def saga_warn_autogenerated_end
    [
      saga_line { "// SMS:autogenerated_end" },
    ]
  end

  def saga_pragma(what)
    [
      saga_line { "#pragma #{what}" },
    ]
  end

  def saga_include_header(name)
    [
      saga_line { "#include \"#{name}.h\"" },
    ]
  end

  def saga_include_system_header(name)
    [
      saga_line { "#include <#{name}>" },
    ]
  end

  def saga_close_modspace
    saga_close_body
  end

  def saga_sacl_signature(mod_name, sacl_name)
    [
      saga_line { "void sacl<#{mod_name}::sacl::#{sacl_name}>()" },
    ]
  end

  def saga_sacl_definition_opening(mod_name, sacl_name)
    [
      saga_line { "template <>" },
    ] +
      saga_sacl_signature(mod_name, sacl_name) +
      saga_open_body
  end

  def saga_declare_sacl(mod_name, comp_name)
    [
      saga_line { "namespace sacl { struct #{comp_name}; }" },
    ]
  end

  def saga_define_sacl(mod_name, sacl_name)
    saga_sacl_definition_opening(mod_name, sacl_name) +
      saga_close_body
  end

  def saga_open_modspace(mod_name)
    [
      saga_line { "namespace #{mod_name}" },
      saga_line { "{" },
    ]
  end

  def saga_template_function_call(
    function_name : String,
    template_args : Array(String),
    function_args : Array(String) = [] of String,
  )
    targs = template_args.join(", ")
    fargs = function_args.join(", ")
    [
      saga_line { "#{function_name}<#{targs}>(#{fargs});" },
    ]
  end

  def saga_indent(n, &block : Proc(Array(LineAdder))) : Array(LineAdder)
    block.call.map { |ladder| ladder.indent_incr }
  end
end

# vim: et ts=2 sw=2

module Source
  @mod_name : String
  @comp_name : String
  include ConfDirViews
  include FileViews

  def path
    File.join(
      conf_sms_root,
      conf_project_root,
      "src",
      @mod_name,
      "#{@comp_name}.cpp"
    )
  end

  def open_w
    File.open(path, "w") do |fout|
      yield fout
    end
  end

  struct LineAdder
    def initialize(@get_val : Proc(String))
    end

    def call(io : IO)
      io.puts @get_val.call
    end
  end

  def add_line(&block : Proc(String))
    LineAdder.new(block)
  end

  def add_empty_body
    [
      (add_line { "{" }),
      (add_line { "}" }),
    ]
  end

  def warn_autogenerated_begin
    [
      (add_line { "// SMS:autogenerated_begin" }),
    ]
  end

  def warn_autogenerated_end
    [
      (add_line { "// SMS:autogenerated_end" }),
    ]
  end

  def include_header
    [
      (add_line { "#include \"#{@comp_name}.h\"" }),
    ]
  end

  def include_sacl
    [
      (add_line { "#include \"sacl.h\"" }),
    ]
  end

  def empty_line
    [
      (add_line { "" }),
    ]
  end

  def define_sacl
    [
      (add_line { "template <>" }),
      (add_line { "void sacl<#{@mod_name}::sacl::#{@comp_name}>()" }),
    ] +
    add_empty_body
  end

  def open_modspace
    [
      (add_line { "namespace #{@mod_name}" }),
      (add_line { "{" }),
    ]
  end

  def close_modspace
    [
      (add_line { "}" }),
    ]
  end

  def header_saga
    warn_autogenerated_begin +
      include_header +
      include_sacl +
      empty_line +
      define_sacl +
      open_modspace +
      warn_autogenerated_end
  end

  def footer_saga
    warn_autogenerated_begin +
      close_modspace +
      warn_autogenerated_end
  end

  def header_generated_lines_count
    header_saga.size
  end

  def resolve_saga(saga, io)
    saga.each do |sag|
      sag.call io
    end
  end

  def rewrite!
    header_saga_ = header_saga
    footer_saga_ = footer_saga

    preserve_start = header_saga_.size
    preserve_end = -footer_saga_.size - 1
    preserve_range = preserve_start..preserve_end

    preserve =
      if preserve_start > @lines.size || preserve_end > @lines.size
        [] of String
      else
        @lines[preserve_range]
      end

    open_w do |fout|
      resolve_saga header_saga_, fout
      preserve.each { |l| fout.puts l }
      resolve_saga footer_saga_, fout
    end
  end
end
